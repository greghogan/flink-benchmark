################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

jobmanager.web.history: 10
metrics.reporters: statsd_reporter
metrics.reporter.statsd_reporter.class: org.apache.flink.metrics.statsd.StatsDReporter
metrics.reporter.statsd_reporter.host: localhost
metrics.reporter.statsd_reporter.port: 9020
metrics.scope.jm: jm.<host>
metrics.scope.jm.job: jm.job.<host>.<job_id>.<job_name>
metrics.scope.tm: tm.<host>.<tm_id>
metrics.scope.tm.job: tm.job.<host>.<tm_id>.<job_id>.<job_name>
metrics.scope.task: task.<host>.<tm_id>.<job_id>.<job_name>.<task_id>.<task_name>.<task_attempt_id>.<task_attempt_num>.<subtask_index>
metrics.scope.operator: operator.<host>.<tm_id>.<job_id>.<job_name>.<task_id>.<task_name>.<task_attempt_id>.<task_attempt_num>.<subtask_index>.<operator_name>
taskmanager.compute.numa: true
taskmanager.memory.fraction: 0.9
taskmanager.memory.off-heap: true
taskmanager.memory.segment-size: 32768
taskmanager.runtime.hashjoin-bloom-filters: true
taskmanager.runtime.max-fan: 8192

# Configuration for Java Flight Recorder
env.java.opts: "-XX:+UnlockCommercialFeatures -XX:+UnlockDiagnosticVMOptions -XX:+FlightRecorder -XX:+DebugNonSafepoints -XX:FlightRecorderOptions=defaultrecording=true,dumponexit=true,dumponexitpath=${FLINK_LOG_PREFIX}.jfr"
# Configuration for JitWatch
#env.java.opts: "-XX:+UnlockDiagnosticVMOptions -XX:+TraceClassLoading -XX:+LogCompilation -XX:LogFile=${FLINK_LOG_PREFIX}.jit -XX:+PrintAssembly"


#==============================================================================
# Common
#==============================================================================

# The host on which the JobManager runs. Only used in non-high-availability mode.
# The JobManager process will use this hostname to bind the listening servers to.
# The TaskManagers will try to connect to the JobManager on that host.

jobmanager.rpc.address: localhost


# The port where the JobManager's main actor system listens for messages.

jobmanager.rpc.port: 6123


# The heap size for the JobManager JVM

jobmanager.heap.mb: 1024


# The heap size for the TaskManager JVM

taskmanager.heap.mb: 18000


# The number of task slots that each TaskManager offers. Each slot runs one parallel pipeline.

taskmanager.numberOfTaskSlots: 18

# Specify whether TaskManager memory should be allocated when starting up (true) or when
# memory is required in the memory manager (false)

taskmanager.memory.preallocate: true

# The parallelism used for programs that did not specify and other parallelism.

parallelism.default: 36


#==============================================================================
# Web Frontend
#==============================================================================

# The port under which the web-based runtime monitor listens.
# A value of -1 deactivates the web server.

jobmanager.web.port: 8081


# The port uder which the standalone web client
# (for job upload and submit) listens.

webclient.port: 8080


#==============================================================================
# Streaming state checkpointing
#==============================================================================

# The backend that will be used to store operator state checkpoints if
# checkpointing is enabled.
#
# Supported backends: jobmanager, filesystem, <class-name-of-factory>
#
#state.backend: filesystem


# Directory for storing checkpoints in a Flink-supported filesystem
# Note: State backend must be accessible from the JobManager and all TaskManagers.
# Use "hdfs://" for HDFS setups, "file://" for UNIX/POSIX-compliant file systems,
# (or any local file system under Windows), or "S3://" for S3 file system.
#
# state.backend.fs.checkpointdir: hdfs://namenode-host:port/flink-checkpoints


#==============================================================================
# Advanced
#==============================================================================

# The number of buffers for the network stack.
#
# taskmanager.network.numberOfBuffers: 2048
taskmanager.network.numberOfBuffers: 25920
#taskmanager.network.numberOfBuffers: 103680
#taskmanager.network.numberOfBuffers: 100000
#taskmanager.network.numberOfBuffers: 155520
#taskmanager.network.numberOfBuffers: 207360
#taskmanager.network.numberOfBuffers: 414720


# Directories for temporary files.
#
# Add a delimited list for multiple directories, using the system directory
# delimiter (colon ':' on unix) or a comma, e.g.:
#     /data1/tmp:/data2/tmp:/data3/tmp
#
# Note: Each directory entry is read from and written to by a different I/O
# thread. You can include the same directory multiple times in order to create
# multiple I/O threads against that directory. This is for example relevant for
# high-throughput RAIDs.
#
# If not specified, the system-specific Java temporary directory (java.io.tmpdir
# property) is taken.

taskmanager.tmp.dirs: /volumes/xvdb/tmp:/volumes/xvdc/tmp:/volumes/xvdd/tmp:/volumes/xvde/tmp:/volumes/xvdf/tmp
#taskmanager.tmp.dirs: /volumes/nvme0/tmp:/volumes/nvme1/tmp:/volumes/nvme2/tmp:/volumes/nvme3/tmp:/volumes/nvme4/tmp:/volumes/nvme5/tmp:/volumes/nvme6/tmp:/volumes/nvme7/tmp

# Path to the Hadoop configuration directory.
#
# This configuration is used when writing into HDFS. Unless specified otherwise,
# HDFS file creation will use HDFS default settings with respect to block-size,
# replication factor, etc.
#
# You can also directly specify the paths to hdfs-default.xml and hdfs-site.xml
# via keys 'fs.hdfs.hdfsdefault' and 'fs.hdfs.hdfssite'.

fs.hdfs.hadoopconf: /efs/software/hadoop-2.7.2/etc/hadoop


#==============================================================================
# Master High Availability (required configuration)
#==============================================================================

# The list of ZooKepper quorum peers that coordinate the high-availability
# setup. This must be a list of the form:
# "host1:clientPort,host2[:clientPort],..." (default clientPort: 2181)
#
# recovery.mode: zookeeper
#
# recovery.zookeeper.quorum: localhost:2181,...
#
# Note: You need to set the state backend to 'filesystem' and the checkpoint
# directory (see above) before configuring the storageDir.
#
# recovery.zookeeper.storageDir: hdfs:///recovery
